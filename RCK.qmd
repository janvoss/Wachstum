# Neoklassische Wachstumstheorie -- endogene Sparquote 

## Das Problem

- Bislang exogene Sparquote

- Nun: Endogene Entscheidung zwischen Konsum und Sparen anhand einer intertemporalen Nutzenfunktion

- Grundlegende Abwägung: 

   - Konsum heute ist besser als Konsum morgen (Gegenwartspräferenz)

   - Aber abnehmender Grenznutzen (daher Glättung des Konsums über die Zeit) und

   - Wachstum ermöglicht mehr Konsum in der Zukunft bei Verzicht in der Gegenwart 
   
## Zwei-Perioden-Modell

### Nutzenfunktion 

$U=u(x_0) + \frac{u(x_1)}{1+i}$

hier mit $u(x_t) = ln(x_t)$

$\Rightarrow u'(x_t) = \frac{1}{x_t}$ (sehr einfache Form des abnehmenden Grenznutzens)

### Budgetbeschränkung

$x_1 = (X_0 -x_0)(1+g)$

### Grafische Repräsentation der Lösung 

$\frac{MU_0}{MU_1\times \frac{1}{1+i}} = \frac{\frac{1}{x_0}}{\frac{1}{x_1}\frac{1}{1+i}}=1+g$

```{python}
#| warning: false
#| message: false
#| eval: true

from sympy import Eq, symbols, solve, diff, lambdify, Rational, latex, log
from lets_plot import *
import numpy as np  # Import NumPy

# Setup Lets-Plot for HTML output
LetsPlot.setup_html()

# Define symbols
X, alpha, i, g, x1, x2, U, lambda_ = symbols('X alpha i g x1 x2 U lambda_')

# Given values for substitution
given_values = {alpha: .5, i: .1, g: .05, X: 100}

# Define utility function
Utility = Eq(U, log(x1) + 1 / (1 + i) * log(x2)).subs(given_values)

# Define budget constraint
budget = Eq(x2, (X - x1) * (1 + g)).subs(given_values)

# Lagrange function
L = Utility.rhs + lambda_ * (budget.lhs - budget.rhs)

# Solve for optimal values
solutions = solve((diff(L, x1), diff(L, x2), diff(L, lambda_)), (x1, x2, lambda_), dict=True)

# Substitute solution into utility function
U_opt = Utility.rhs.subs(solutions[0])

# Extract optimal values of x1 and x2
x1_opt = float(solutions[0][x1])
x2_opt = float(solutions[0][x2])

# Budget line endpoints
x1_budget = float(given_values[X])  # Maximum value of x1
x2_budget = float(given_values[X] * (1 + given_values[g]))  # Maximum value of x2

# Indifference curve utility levels
U_values = [float(U_opt) - 1, float(U_opt), float(U_opt) + 1]
colors = ['blue', 'green', 'blue']

# Budget line function
budget_line = lambdify(x1, solve(budget, x2)[0].subs(given_values))

# Generate x-values for plotting
x_values = np.arange(0.01, x1_budget + 0.5, 0.1)
data = {'x': x_values.tolist()}

# Plotting with Lets-Plot
p = ggplot() + \
    geom_function(aes('x'), data=data,
                  fun=lambda t: budget_line(t), color='red')

for idx, u in enumerate(U_values):
    Indifference_curve = solve(Utility.subs(U, u), x2)[0]
    Ind_graph = lambdify(x1, Indifference_curve)
    p += geom_function(aes('x'), data=data,
                       fun=lambda t: Ind_graph(t), color=colors[idx], size=1) + \
         geom_text(x=x1_budget + 0.5,
                   y=Ind_graph(x1_budget),
                   label=f"U={round(u, 2)}")

p += geom_segment(x=x1_opt, y=0,
                  xend=x1_opt, yend=x2_opt,
                  linetype='dashed', size=0.5) + \
     geom_segment(x=0, y=x2_opt,
                  xend=x1_opt, yend=x2_opt,
                  linetype='dashed', size=0.5) + \
     geom_point(x=x1_opt, y=x2_opt) + \
     labs(title='Intertemporale Konsumoptimierung im Zwei-Perioden-Model',
          x=r'\(x_0\)',
          y=r'\(x_1\)',
          caption='Abbildung: Jan S. Voßwinkel') + \
     coord_cartesian(xlim=[0, x1_budget + 5.
], ylim=[0, x2_budget + 10]) + \
     scale_x_continuous(breaks=[0, round(x1_opt, 2), round(x1_budget)]) + \
     scale_y_continuous(breaks=[0, round(x2_opt, 2), round(x2_budget)]) + \
     theme_light()

# Display the plot
p.show()


```

### Die Euler-Gleichung 

- Aus der Grafik: Steigung der Budgetbeschränkung = Steigung der Indifferenzkurve


- $- \frac{u_0' (1+i)}{u_1'} = -(1+g)$   
$\iff \boxed{u_1' = \frac{1+i}{1+g} u_0'}$

- Der *korrigierte* Grenznutzen ist in allen Perioden gleich

- Sonst wäre (bei abnehmendem Grenznutzen) Periodensrbitrage durch Konsumverlagerung möglich.

- korrigiert:  
   - $(1+i)$: Der Grenznutzen der zukünftigen Periode ist um den Faktor (1+i) *höher*, da der Nutzen der zukünftigen Periode mit $\frac{1}{1+i}$ diskontiert wird.  

  - $(1+g)$: Der Grenznutzen der zukünftigen Periode ist um den Faktor $\frac{1}{1+g}$ *geringer*, da durch Wachstum die Ressource weniger knapp ist und daher mehr konsumiert (und damit der geringere Grenznutzen ausgeglichen) werden kann.

- Für die Nutzenfunktion $u(x_t)= ln(x_t)$ heißt das: $\frac{1}{x_1} = \frac{1+i}{1+g} \frac{1}{x_0}$ $\iff \boxed{x_1 = \frac{1+g}{1+i} x_0}$
  
  
Für Lösung gleichsetzen:
$x_0 \frac{1+g}{1+i}=(X_0-x_0)(1+g)$

$\iff \frac{x_0}{1+i}=X_0-x_0$

$\iff \frac{X_0-x_0}{x_0}=\frac{1}{1+i}$

$\iff \frac{X_0}{x_0}-1=\frac{1}{1+i}$

$\iff \frac{X_0}{x_0}=1+\frac{1}{1+i}$

$$\iff \boxed{x_0 = X_0 \frac{1 + i}{2 + i}}$$  
  

## T-Perioden-Modell, kontinuierliche Zeit

### Vorüberlegungen

Wenn eine Ressource in kontinuierlicher Zeit mit der Wachstumsrate $g$ wächst, und sie ursprünglich $X_0$ beträgt, dann beträgt sie nach $T$ Perioden $X_T=X_0 \times  e^{g\times T}$ Einheiten.

Wenn der Nutzen zukünftiger Prioden mit der Rate $i$ diskontiert wird, dann beträgt der Gegenwartswert zukünftigesn Nutzens in Periode $T$ $u_{PV}(x_T)=u(x_T) \times e^{-i \times T}$.


Die **Euler-Gleichung** in kontinuierlicher Zeit lautet dann $$u'(x_1)=u'(x_0) e^{(i-r)}$$

Der Gegenwartswert mehrerer zukünftiger Perioden ergibt sich aus dem Integral der absdiskontierten Nutzenwerte über die Zeit.

$U= \int_0^T u(x_t)e^{-it} dt$

Zunächst sei hier wieder von folgender Nutzenfunktion ausgegangen:

$u(x_t)=ln(x_t)$

Aus der Ableitung der Nutzenfunktion $u'(x_t)= \frac{1}{x_t}$ folgt der optimale Konsumpfad: $$\boxed{x_{t+1}=x_t \times e^{r-i}}$$.

Da dies für alle Perioden gilt, ist $$x_t= x_0\ e^{(r-i)t}$$

### Ressourcenbeschränkung

Zu jedem Zeitpunkt wächst die Ressource mit der Rate $r$ vermindert um die Entnahme zu dem Zeitpunkt $x_t$. Der Anfangsbestand der Ressource ist $X_0$, am Ende des Planungshorizontes soll die Ressource aufgebraucht sein, $X_T=0$.

$\dot{X}(t) = rX(t) - x(t), \quad X(0) = X_0, \quad X(T) = 0$

$\dot{X}(t) = rX(t) - x(0) e^{(r - i)t}$

Auflösen:

$X(t) = e^{rt} \left( X_0 - x(0) \int_0^t e^{-is} \, ds \right)$

Integral auflösen

$X(t) = e^{rt} \left( X_0 - \frac{x(0)}{i} \left( 1 - e^{-it} \right) \right)$

$X_T=0$, also

$X_0=\frac{x(0)}{i}( 1 - e^{-iT})$

$\iff x_0 = \frac{i X_0}{1-e^{iT}}$

$x_t= x_0\ e^{(r-i)t}$

$$ \iff \boxed{ x_t=\frac{i X_0}{1-e^{iT}}\ e^{(r-i)t}}$$


### Effizienter intertemporaler Konsumpfad

$x_t= x_0\ e^{(r-i)t}$


$$ \boxed{ x_t=\frac{i X_0}{1-e^{iT}}\ e^{(r-i)t}}$$


Mit $T \to \infty$

$$ \boxed{x_t=i X_0\times e^{(r-i)t}}$$


```{python}
#| message: false
#| warning: false

import numpy as np
from sympy import symbols, exp, log, integrate, lambdify
from lets_plot import *
from scipy.integrate import odeint
from scipy.optimize import brentq
LetsPlot.setup_html()

# Konfiguration
X_0, i, g = 100, 0.03, 0.06
t_sym = symbols('t', real=True, positive=True)
time = np.linspace(0, 100, 500)

# SymPy Berechnungen
x_t = X_0 * i * exp((g - i) * t_sym)
U_t = integrate(log(x_t) * exp(-i * t_sym), (t_sym, 0, t_sym))
Uz_t = integrate(log(X_0 * g) * exp(-i * t_sym), (t_sym, 0, t_sym))

# Numerische Funktionen
f_x, f_U, f_Uz = [lambdify(t_sym, f, 'numpy') for f in [x_t, U_t, Uz_t]]

# Differentialgleichung für Ressourcenbestand
def dXdt(X, t):
    return g * X - f_x(t)  # Wachstum - Entnahme

# Lösen der ODE
X_values = odeint(dXdt, X_0, time).flatten()

# Separaten DataFrames für jeden Plot erstellen
df_entnahme = {
    'Zeit': np.concatenate([time, time]),
    'Wert': np.concatenate([f_x(time), np.full_like(time, X_0 * g)]),
    'Kurve': ['x(t)'] * len(time) + ['z(t)'] * len(time)
}

df_nutzen = {
    'Zeit': np.concatenate([time, time]),
    'Nutzen': np.concatenate([f_U(time), f_Uz(time)]),
    'Art': ['U(t)'] * len(time) + ['Uz(t)'] * len(time)
}

df_ressource = {
    'Zeit': time,
    'Bestand': X_values
}

# Plot Entnahmepfade
plot_entnahme = (ggplot(df_entnahme)
                + geom_line(aes('Zeit', 'Wert', color='Kurve'), size=1)
                + scale_color_manual(values=['blue', 'red'])
                + labs(title='Entnahmepfade',
                      x='Zeit t',
                      y='Entnahmerate',
                      color='Legende:')
                + theme(legend_position='right'))

# Plot Nutzenfunktionen
plot_nutzen = (ggplot(df_nutzen)
              + geom_line(aes('Zeit', 'Nutzen', color='Art'), size=1)
              + scale_color_manual(values=['blue', 'red'])
              + labs(title='Abgezinster Gesamtnutzen',
                    x='Zeit t',
                    y='Gesamtnutzen',
                    color='Legende:')
              + theme(legend_position='right'))

# Plot Ressourcenentwicklung
plot_ressource = (ggplot(df_ressource)
                 + geom_line(aes('Zeit', 'Bestand'), color='darkgreen', size=1)
                 + labs(title='Entwicklung des Ressourcenbestands',
                       x='Zeit t',
                       y='Ressourcenbestand X(t)')
                 + ylim(0, None))

plot_entnahme.show()
plot_nutzen.show()
plot_ressource.show()

# Nullstellensuche
try:
    t_root = brentq(lambda t: f_U(t) - f_Uz(t), 0.01, 200)
    print(f"Schnittpunkt bei t = {t_root:.2f}")
except ValueError:
    print("Kein Schnittpunkt im Intervall gefunden")

```

## Allgemeinere Nutzenfunktion

Bislang verwendete Nutzenfunktion: 

$U= \int_0^T u(x_t)e^{-it} dt$

mit $u(x_t)=ln(x_t)$

Nun eine Funktion mit konstanter (aber steuerbarer) Risikoaversion

$u(x_t)=\frac{x_t^{1-\sigma}}{1-\sigma}$

Der Grenznutzen ist 

$u'(x_t)=x_t^{-\sigma}$

```{python}
#| warning: false
#| message: false
#| output: false

import sympy as sp

# Symbole definieren
x, sigma = sp.symbols('x sigma', positive=True, real=True)

# Nutzenfunktion
u = (x**(1 - sigma)) / (1 - sigma)

# Ableitung nach x
du_dx = sp.diff(u, x)

print("Ableitung der Nutzenfunktion nach x:")
sp.pprint(sp.simplify(du_dx))

```


Die Krümmung der Nutzenfunktion ist jetzt über $\sigma$ steuerbar


```{python}
#| warning: false
#| message: false

import numpy as np
import pandas as pd
from lets_plot import *
LetsPlot.setup_html()

# Wertebereich für x
x = np.linspace(0, 50, 100)

# Die drei gewünschten sigma-Werte
sigmas = [0.2, 0.5, 0.8]
farben = ['blue', 'orange', 'green']

# Daten für alle sigma-Werte sammeln
data = pd.DataFrame({
    'x': np.tile(x, len(sigmas)),
    'u': np.concatenate([(x**(1-s))/(1-s) for s in sigmas]),
    'sigma': np.repeat([f'sigma={s}' for s in sigmas], len(x))
})

# Plot
plot = (ggplot(data, aes(x='x', y='u', color='sigma'))
        + geom_line(size=1)
        + ggtitle("Nutzenfunktion für verschiedene Sigma-Werte")
        + scale_color_manual(values=farben)
        + xlab("x")
        + ylab("u")
       )
plot


```

Intertemporaler Ausgleich der Grenznutzen

$x_{t+1}^{-\sigma}=x_t^{-\sigma}e^{i-r}$

$\iff x_{t+1}^{\sigma}=x_t^{\sigma}e^{r-i}$


$\iff x_{t+1}=x_te^{\frac{r-i}{\sigma}}$


## Gleichgewichtsbedingung Wachstum

Bisher Konsum: $x_t$
Jetzt makroökonomischer Pro-Kopf Konsum $c_t$

$c_{t+1}=c_te^{\frac{r-i}{\sigma}}$

Der Konsum wächst mit der Rate $\frac{1}{\sigma}(r-i)$

$r$ ist die Pro-Kopf Nettorendite auf das eingesetzte Kapital, also Grenzprodukt abzüglich Abschreibungen

$r_t=k_t'-\delta$

Der Konsum wächst also mit der Rate $\frac{1}{\sigma}(k_t'-\delta-i)$

Bei abnehmender Grenzproduktivität des Kapitals gilt irgendwann
$k_t'-\delta-i=0 \iff k_t'=\delta+i$ Dann ist kein weiteres Wachstum des Konsums möglich (und damit auch kein Wirtschaftswachstum)

$\alpha k^{*(\alpha-1)}=\delta-i$

$$\boxed{k^*=\frac{\alpha}{i+\delta}^{\frac{1}{1-\alpha}}}$$

$$\Rightarrow \boxed{y^*=\frac{\alpha}{i+\delta}^{\frac{\alpha}{1-\alpha}}}$$

## Implikationen für den Wachstumspfad

Welche Rolle spielt $\sigma?$

Interpretation von $\sigma$ als Parameter für Risikoaversion

- niedriges $\sigma$: Gegenwärtiger Mehrkonsum bei Einkommenszuwachs

- hohes $\sigma$: Geringe Reaktion im gegenwärtigen Konsum auf Einkommensschwankungen. Glättung des Konsumpfades

Das Gleichgewichtige Einkommen ist unabhängig von $\sigma$
